# -*- coding: utf-8 -*-
"""IT350_A1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HRZNn97oRqPFDquIqRLjBwj2XCPyW4I_

# IT350 Assignment 1
Name: Suyash Chintawar

Roll no: 191IT109
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv('drive/MyDrive/it350_a1/wine_data.csv')

data

data.describe()

#Remove predictor column
Y = data['class']
data = data.drop(['class'],axis=1)
data.describe()

#Visualizing all features w.r.t alcohol
plt.rcParams["figure.figsize"] = (16, 12)
plt.rcParams["font.size"] = 10

ylabel = 'alcohol'
columns = ['malic_acid','ash','ash_alcalinity','magnesium','total_phenol','flavanoid','non_flavanoid_phenol','proanthocyanin','color_intensity','hue','od280_od315','proline']

for index, xlabel in enumerate(columns):
  plt.subplot(3, 4, index+1)
  plt.scatter(data[xlabel], data[ylabel],c=Y,linewidth=0.5)
  plt.xlabel(xlabel)
  plt.ylabel(ylabel)

#Visualizing all features w.r.t color intensity
plt.rcParams["figure.figsize"] = (16, 12)
plt.rcParams["font.size"] = 10

ylabel = 'color_intensity'
columns = ['malic_acid','ash','ash_alcalinity','magnesium','total_phenol','flavanoid','non_flavanoid_phenol','proanthocyanin','alcohol','hue','od280_od315','proline']

for index, xlabel in enumerate(columns):
  plt.subplot(3, 4, index+1)
  plt.scatter(data[xlabel], data[ylabel],c=Y,linewidth=0.5)
  plt.xlabel(xlabel)
  plt.ylabel(ylabel)

#PCA from scratch

#step1: column standardisation
def column_standardisation(df):
  for col in df.columns:
    mean = np.mean(df[col])
    stddev = np.std(df[col])
    df[col] = (df[col]-mean)/stddev
  return df

#step2: covariance matrix computation
def compute_covmatrix(df):
  return np.cov(df.T)

#step3: find eigen values and eigen vectors of covariance matrix
def eigen_decomposition(matrix):
  evals, evecs = np.linalg.eig(matrix)
  evecs = evecs.T
  sorted_evecs = [evecs for evals, evecs in sorted(zip(evals, evecs), reverse=True)]
  sorted_evecs = np.array(sorted_evecs)
  return sorted_evecs.T

#step4: get transformed matrix
def transform(evecs,df):
  return np.dot(df,evecs)

data = column_standardisation(data)
cov_matrix = compute_covmatrix(data)
evecs = eigen_decomposition(cov_matrix)
pca_df = transform(evecs,data)

plt.rcParams["figure.figsize"] = (6, 6)
plt.scatter(pca_df[:,0],pca_df[:,1],c=Y)
plt.xlabel('Component1')
plt.ylabel('Component2')
plt.title('Visualization after PCA (k=2)')
plt.show()

#SVD from scratch
def compute_eigen(data):
  aat = data.dot(data.T) 
  evals_aat,evecs_aat = np.linalg.eigh(aat)
  ata = data.T.dot(data) 
  evals_ata,evecs_ata = np.linalg.eigh(ata)
  return aat, evals_aat, evecs_aat, ata, evals_ata, evecs_ata


def sort_eigen(evals_aat, evecs_aat, evals_ata, evecs_ata):
  index1 = evals_aat.argsort()[::-1]
  evals_aat = evals_aat[index1] 
  evecs_aat = evecs_aat[:,index1]
  index2 = evals_ata.argsort()[::-1] 
  evals_ata = evals_ata[index2] 
  evecs_ata = evecs_ata[:,index2]
  return evals_aat, evecs_aat, evals_ata, evecs_ata


def compute_USV(data, evecs_aat, evals_ata, evecs_ata):
  U = evecs_aat 
  temp = np.diag(np.sqrt(evals_ata)) 
  S = np.zeros_like(data).astype(np.float64) 
  S[:temp.shape[0], :temp.shape[1]] = temp 
  V = evecs_ata.T
  return U,S,V

data1 = pd.read_csv('drive/MyDrive/it350_a1/wine_data.csv')
data1 = data1.drop(['class'],axis=1)
data1 = column_standardisation(data1)

aat, evals_aat, evecs_aat, ata, evals_ata, evecs_ata = compute_eigen(data1)
evals_aat, evecs_aat, evals_ata, evecs_ata = sort_eigen(evals_aat, evecs_aat, evals_ata, evecs_ata)
U,S,V = compute_USV(data1, evecs_aat, evals_ata, evecs_ata)

svd_df = data1.dot(V.T)

plt.rcParams["figure.figsize"] = (6, 6)
plt.scatter(svd_df.iloc[:,0],svd_df.iloc[:,1],c=Y)
plt.xlabel('Component1')
plt.ylabel('Component2')
plt.title('Visualization after SVD (k=2)')
plt.show()

